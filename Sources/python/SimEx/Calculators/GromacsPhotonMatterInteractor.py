""":module GromacsPhotonMatterInteractor: Module that holds the GromacsPhotonMatterInteractor class."""
##########################################################################
#                                                                        #
# Copyright (C) 2020, 2021 Ibrahim Dawod, Juncheng E                     #
# Contact:                                                               #
#       Ibrahim Dawod <ibrahim.dawod@physics.uu.se>                      #
#       Juncheng E <juncheng.e@xfel.eu>                                  #
#                                                                        #
# This file is part of simex_platform.                                   #
# simex_platform is free software: you can redistribute it and/or modify #
# it under the terms of the GNU General Public License as published by   #
# the Free Software Foundation, either version 3 of the License, or      #
# (at your option) any later version.                                    #
#                                                                        #
# simex_platform is distributed in the hope that it will be useful,      #
# but WITHOUT ANY WARRANTY; without even the implied warranty of         #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          #
# GNU General Public License for more details.                           #
#                                                                        #
# You should have received a copy of the GNU General Public License      #
# along with this program.  If not, see <http://www.gnu.org/licenses/>.  #
#                                                                        #
##########################################################################

import h5py
import numpy
import os
import shlex
import subprocess
import random
import string
from scipy import constants

from SimEx.Calculators.AbstractPhotonInteractor import AbstractPhotonInteractor
from SimEx.Parameters.GromacsPhotonMatterInteractorParameters import GromacsPhotonMatterInteractorParameters
from SimEx.Utilities.EntityChecks import checkAndSetInstance
from SimEx.Utilities import IOUtilities


class GromacsPhotonMatterInteractor(AbstractPhotonInteractor):
    """ :class GromacsPhotonMatterInteractor: Wrapper class for photon-matter interaction calculations using the XMDYN code."""
    def __init__(self,
                 parameters=None,
                 input_path=None,
                 output_path=None,
                 sample_path=None):
        """

        :param parameters: Parameters that govern the PMI calculation.
        :type parameters: dict

        :param input_path: Location of data needed by the PMI calculation (Laser source wavefront data).
        :type input_path: str

        :param output_path: Where to store the data generated by the PMI calculation.
        :type output_path: str

        :param sample_path: Location of the sample/target geometry file. Can be either a simS2E sample file or a pdb file. Specifying a pdb will first check if it's present in a database, if not, it will issue a query for the basename of the file to the RCSB protein data bank.
        :type sample_path: str

        :param root_path: Path to a root directory from which to restart a (previously failed) simulation.
        :type root_path: str
        """

        # Initialize base class.
        super(GromacsPhotonMatterInteractor,
              self).__init__(parameters, input_path, output_path)

        self.parameters = parameters
        self.input_path = input_path
        self.output_path = output_path
        self.sample_path = sample_path

    @property
    def parameters(self):
        """ Query the calculator parameters.

        :return: The parameters of this Calculator.

        """
        return self.__parameters

    @parameters.setter
    def parameters(self, val):
        """ Set (and check) the parameters. """

        if val is None:
            raise ValueError(
                "A GromacsPhotonMatterInteractorParameters argument should be given here."
            )

        if isinstance(val, GromacsPhotonMatterInteractorParameters):
            self.__parameters = val

    @property
    def sample_path(self):
        """ Get the path to the sample coordinate file. """
        return self.__sample_path

    @sample_path.setter
    def sample_path(self, value):
        # Check sample path.
        if value is None:
            raise ValueError(
                "A target/sample must be specified through the 'sample_path' argument."
            )
        if not os.path.isfile(value):
            print(
                "Sample file %s was not found. Will attempt to query from RCSB protein data bank."
                % (value))
        self.__sample_path = checkAndSetInstance(str, value, 'sample.h5')

    def backengine(self):
        """ This method drives the backengine code."""
        # TODO: @Ibee, please implement your codes here. Some general useful functions can be saved in Sources/python/SimEx/Utilities

        # If the sample is passed as a pdb, branch out to separate backengine implementation.
        if self.sample_path.split(".")[-1].lower() == 'pdb':
            if not os.path.isfile(self.sample_path):
                # Attempt to query from pdb.
                self.sample_path = IOUtilities.checkAndGetPDB(self.sample_path)

    def saveH5(self):
        """ 
        Save the output in XMDYN .h5 format defined 
        in https://simex.readthedocs.io/en/latest/include/data_formats.html#photon-matter-interaction-xmdyn 
        """
        # TODO: @Ibee, please implement your codes here. Some general useful functions can be saved in Sources/python/SimEx/Utilities
